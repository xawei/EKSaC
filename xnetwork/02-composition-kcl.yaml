apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: x-network-kcl
spec:
  compositeTypeRef:
    apiVersion: consumable.trustbank.sg/v1alpha1
    kind: xNetworkKcl
  mode: Pipeline
  pipeline:
  - step: create-vpc
    functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        name: "xplane-vpc"
      spec:
        target: Default
        source: |
          oxr = option("params").oxr
          labels = oxr.metadata?.labels or {}
          owner_tag_value = labels["consumable.trustbank.sg/owner"] or "no value"

          items = [{
            apiVersion = "ec2.aws.upbound.io/v1beta1"
            kind = "VPC"
            metadata.name = oxr.spec.name + "-xplane-vpc"
            spec.forProvider = {
              region = oxr.spec.location
              cidrBlock = oxr.spec.vpcCidr
              enableDnsSupport = True
              enableDnsHostnames = True
              tags: {
                Name = oxr.spec.name + "-xplane-vpc"
                Owner = owner_tag_value
                Environment = "sandbox"
                Project = "crossplane"
              }
            }
            spec.providerConfigRef.name = "provider-aws-ec2"
          }]
  - step: create-public-subnets
    functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        name: "xplane-subnets"
      spec:
        target: Default
        source: |
          oxr = option("params").oxr
          labels = oxr.metadata?.labels or {}
          owner_tag_value = labels["consumable.trustbank.sg/owner"] or "no value"
          public_subnets = oxr.spec.subnets.public

          items = [{
            apiVersion = "ec2.aws.upbound.io/v1beta1"
            kind = "Subnet"
            metadata.name = oxr.spec.name + "-xplane-public-subnet-" + zone
            spec.forProvider = {
              region = oxr.spec.location
              availabilityZone = "ap-southeast-" + zone
              cidrBlock = cidr
              tags: {
                Name = oxr.spec.name + "-xplane-public-subnet-" + zone
                Owner = owner_tag_value
                Environment = "sandbox"
                Project = "crossplane"
              }
              vpcIdRef.name = oxr.spec.name + "-xplane-vpc"
            }
            spec.providerConfigRef.name = "provider-aws-ec2"
          } for zone, cidr in public_subnets]
  - step: create-igw
    functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        name: "xplane-igw"
      spec:
        target: Default
        source: |
          oxr = option("params").oxr
          labels = oxr.metadata?.labels or {}
          owner_tag_value = labels["consumable.trustbank.sg/owner"] or "no value"

          items = [{
            apiVersion = "ec2.aws.upbound.io/v1beta1"
            kind = "InternetGateway"
            metadata.name = oxr.spec.name + "-xplane-igw"
            spec.forProvider = {
              region = oxr.spec.location
              tags: {
                Name = oxr.spec.name + "-xplane-igw"
                Owner = owner_tag_value
                Environment = "sandbox"
                Project = "crossplane"
              }
              vpcIdRef.name = oxr.spec.name + "-xplane-vpc"
            }
            spec.providerConfigRef.name = "provider-aws-ec2"
          }]
  - step: create-public-rt
    functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        name: "xplane-public-rt"
      spec:
        target: Default
        source: |
          oxr = option("params").oxr
          labels = oxr.metadata?.labels or {}
          owner_tag_value = labels["consumable.trustbank.sg/owner"] or "no value"

          items = [{
            apiVersion = "ec2.aws.upbound.io/v1beta1"
            kind = "RouteTable"
            metadata.name = oxr.spec.name + "-xplane-public-rt"
            spec.forProvider = {
              region = oxr.spec.location
              tags: {
                Name = oxr.spec.name + "-xplane-public-rt"
                Owner = owner_tag_value
                Environment = "sandbox"
                Project = "crossplane"
              }
              vpcIdRef.name = oxr.spec.name + "-xplane-vpc"
            }
            spec.providerConfigRef.name = "provider-aws-ec2"
          }]
  - step: create-public-route
    functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        name: "xplane-public-route"
      spec:
        target: Default
        source: |
          oxr = option("params").oxr

          items = [{
            apiVersion = "ec2.aws.upbound.io/v1beta1"
            kind = "Route"
            metadata.name = oxr.spec.name + "-xplane-public-route"
            spec.forProvider = {
              region = oxr.spec.location
              routeTableIdRef.name = oxr.spec.name + "-xplane-public-rt"
              destinationCidrBlock: "0.0.0.0/0"
              gatewayIdRef.name = oxr.spec.name + "-xplane-igw"
            }
            spec.providerConfigRef.name = "provider-aws-ec2"
          }]
  - step: create-rt-association
    functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        name: "xplane-rt-association"
      spec:
        target: Default
        source: |
          oxr = option("params").oxr
          public_subnets = oxr.spec.subnets.public

          items = [{
            apiVersion = "ec2.aws.upbound.io/v1beta1"
            kind = "RouteTableAssociation"
            metadata.name = oxr.spec.name + "-xplane-public-rta-" + zone
            spec.forProvider = {
              region = oxr.spec.location
              routeTableIdRef.name = oxr.spec.name + "-xplane-public-rt"
              subnetIdRef.name = oxr.spec.name + "-xplane-public-subnet-" + zone
            }
            spec.providerConfigRef.name = "provider-aws-ec2"
          } for zone, cidr in public_subnets]
  - step: create-natgwe-eip
    functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        name: "xplane-natgw-eip"
      spec:
        target: Default
        source: |
          oxr = option("params").oxr
          labels = oxr.metadata?.labels or {}
          owner_tag_value = labels["consumable.trustbank.sg/owner"] or "no value"

          items = [{
            apiVersion = "ec2.aws.upbound.io/v1beta1"
            kind = "EIP"
            metadata.name = oxr.spec.name + "-xplane-natgw-eip"
            spec.forProvider = {
              region = oxr.spec.location
              tags: {
                Name = oxr.spec.name + "-xplane-natgw-eip"
                Owner = owner_tag_value
                Environment = "sandbox"
                Project = "crossplane"
              }
            }
            spec.providerConfigRef.name = "provider-aws-ec2"
          }]
  - step: create-natgw
    functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        name: "xplane-natgw"
      spec:
        target: Default
        source: |
          oxr = option("params").oxr
          labels = oxr.metadata?.labels or {}
          owner_tag_value = labels["consumable.trustbank.sg/owner"] or "no value"

          items = [{
            apiVersion = "ec2.aws.upbound.io/v1beta1"
            kind = "NATGateway"
            metadata.name = oxr.spec.name + "-xplane-natgw"
            spec.forProvider = {
              region = oxr.spec.location
              tags: {
                Name = oxr.spec.name + "-xplane-natgw"
                Owner = owner_tag_value
                Environment = "sandbox"
                Project = "crossplane"
              }
              allocationIdRef.name = oxr.spec.name + "-xplane-natgw-eip"
              subnetIdRef.name = oxr.spec.name + "-xplane-public-subnet-1b"
            }
            spec.providerConfigRef.name = "provider-aws-ec2"
          }]
  - step: create-default-rt
    functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        name: "xplane-default-rt"
      spec:
        target: Default
        source: |
          oxr = option("params").oxr
          labels = oxr.metadata?.labels or {}
          owner_tag_value = labels["consumable.trustbank.sg/owner"] or "no value"
          ocds = option("params").ocds

          items = [{
            apiVersion = "ec2.aws.upbound.io/v1beta1"
            kind = "DefaultRouteTable"
            metadata.name = oxr.spec.name + "-xplane-default-rt"
            spec.forProvider = {
              region = oxr.spec.location
              tags: {
                Name = oxr.spec.name + "-xplane-default-rt"
                Owner = owner_tag_value
                Environment = "sandbox"
                Project = "crossplane"
              }
              defaultRouteTableIdRef.name = oxr.spec.name + "-xplane-vpc"
              route = [{
                cidrBlock = "0.0.0.0/0"
                natGatewayId = ocds[oxr.spec.name + "-xplane-natgw"]?.Resource?.status?.atProvider?.id or ""
              }]
            }
            spec.providerConfigRef.name = "provider-aws-ec2"
          }]
  - step: auto-ready
    functionRef:
      name: function-auto-ready